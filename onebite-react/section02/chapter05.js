// 원시타입 vs 객체타입

let o1 = { name: "조성민" };
// 얕은 복사 -> 같은 메모리를 참조
let o2 = o1;
// 깊은 복사 -> 다른 메모리를 참조
let o3 = { ...o1 };

// 1. 의도치 않게 값이 수정될 수 있다.
// o2는 같은 참조값을 라우팅하므로 수정 가능
o2.name = "홍길동";
// o3는 다른 참조값을 라우팅하므로 원본 데이터 수정되지 않음.
o3.name = "홍길동";

// 2. 객체 타입 주의사항 : 객체간의 비교는 기본적으로 참조값을 기준으로 이루어진다.
// 얕은 비교 (객체의 참조값이 같은지 비교)
console.log(o1 === o2); // true
console.log(o1 === o3); // false

// 객체 타입을 문자열로 변환
// 깊은 비교 (객체의 프로퍼티가 같은지 비교)
console.log(JSON.stringify(o1) === JSON.stringify(o2)); // True

// 3. 객체 타입 주의사항 : 배열과 함수도 사실 객체이다.
